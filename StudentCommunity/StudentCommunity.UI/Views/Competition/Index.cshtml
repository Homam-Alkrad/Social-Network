@model List<StudentCommunity.UI.Models.Competition.CompetitionViewModel>
@using Microsoft.AspNetCore.Identity
@using StudentCommunity.UI.Data
@inject UserManager<ApplicationUser> UserManager
@{
	var user = await UserManager.GetUserAsync(User);
	Layout = "_Layout2";
	ViewData["Title"] = "Competitions Scheduale";

}
<html>

<head>
	<style>
		.relative {
			position: relative;
		}
	</style>
</head>
<body>
	<section>
		<div class="gap gray-bg py-2">
			<div class="container-fluid">
				<div class="row">
					<div class="col-lg-12">
						<div class="row" id="page-contents">
							<div class="col-lg-3">
								<aside class="sidebar static" style="width: 100%;">
									<div class="widget px-2">
										<h4 class="widget-title">Shortcuts</h4>
										<ul class="naves" style="padding:10px 5px;">
											<li class="width:100%">
												<i class="ti-mouse-alt"></i>
												<a asp-action="MyProfile" asp-controller="Community" title="">My Profile</a>
											</li>
											<li>
												<i class="ti-home"></i>
												<a asp-action="Index" asp-controller="Community">Students Community</a>
											</li>
											@if (user != null && User.IsInRole("Admin"))
											{
												<li>
													<i class="fa fa-list-alt" aria-hidden="true"></i>
													<a asp-action="CompetitionsList" asp-controller="Competition">Competitions List</a>
												</li>
											}
											<li>
												<i class="fa fa-briefcase" aria-hidden="true"></i>
												<a asp-action="Index" asp-controller="Library" title=""> Student Library </a>
											</li>
											<li>
												<i class="ti-comments-smiley"></i>
												<a asp-action="Chat" asp-controller="ChatSystem" title="">Chat System</a>
											</li>
											<li>
												<i class="ti-clipboard"></i>
												<a asp-action="News" asp-controller="Community" title="">News feed</a>
											</li>
											<li>
												<i class="fa fa-users" aria-hidden="true"></i>
												<a asp-action="Index" asp-controller="Groups" title="">My Groups</a>
											</li>
											<li>
												<i class="ti-user"></i>
												<a asp-action="Index" asp-controller="Friend" title="">friends</a>
											</li>
											<li>
												<i class="fa fa-lightbulb-o" aria-hidden="true"></i>
												<a asp-action="CreateAdvertising" asp-controller="Advertisement" title="">Advertise with Us</a>
											</li>
											<li>
												<i class="fa fa-wpforms" aria-hidden="true"></i>
												<a asp-action="Create" asp-controller="Assessment" title="">Community Assessment</a>
											</li>
											@if (user != null && User.IsInRole("Admin"))
											{
												<li>
													<i class="fa fa-low-vision" aria-hidden="true"></i>
													<a asp-action="RoleList" asp-controller="Account">Community Roles</a>
												</li>
											}
											<li>
												<i class="ti-power-off"></i>
												<a asp-action="Logout" asp-controller="Account" title="">Logout</a>
											</li>
										</ul>
									</div>
									<div class="widget">
										<h4 class="widget-title">Notification</h4>
										<ul class="activitiez">
											@await Component.InvokeAsync("Notification",user.Id)
										</ul>
									</div>
								</aside>
							</div>
							<div class="col-lg-9">
								<div class="loadMore">
									<div class="central-meta">
										<div class="frnds">
											<ul class="nav nav-tabs">
												<li class="nav-item"><a class="active" href="#frends" data-toggle="tab">Available Competitions</a> <span>@Model.Count</span></li>
											</ul>
											@{
												var competitionList = Model;
											}
											@foreach (var competitionItem in competitionList.OrderByDescending(x => x.CompetitionTime))
											{
												if (!competitionItem.IsDelete)
												{
													<div class="tab-content">
														<div class="tab-pane active fade show " id="frends">
															<ul class="nearby-contct">
																<li>
																	<div class="nearly-pepls d-flex flex-row">
																		<figure>
																			<a href="" title=""><img src="~/custom/images/acm.png" /></a>
																		</figure>
																		<div class="pepl-info">
																			<h4>
																				<a href="" title="">@competitionItem.Name</a>
																				@if (user != null && await UserManager.IsInRoleAsync(user, "Admin"))
																				{
																					<a class="ml-2" asp-action="EditCompetition" asp-controller="Competition" asp-route-Id="@competitionItem.Id"><i class="fa fa-pencil-square-o" aria-hidden="true"></i></a>
																				}
																			</h4>
																			<div class="competition-item" data-competition-time="@competitionItem.CompetitionTime">
																				@if (!competitionItem.IsFinshed)
																				{
																					if (competitionItem.CompetitionTime.HasValue)
																					{
																						TimeSpan timeDifference = competitionItem.CompetitionTime.Value - DateTime.Now;

																						if (timeDifference.TotalDays >= 1)
																						{
																							<span>
																								@competitionItem.CompetitionTime.Value.ToString("MMM dd, yyyy HH:mm")
																							</span>
																							<a title="" class="add-butn relative" data-ripple="" asp-action="Teams" asp-route-Id="@competitionItem.Id">Register</a>
																						}
																						else if (timeDifference.TotalHours >= 0)
																						{
																							<span class="countdown">
																								@timeDifference.Hours: @(timeDifference.Minutes.ToString("D2")): @(timeDifference.Seconds.ToString("D2"))
																							</span>
																							<a title="" class="add-butn" data-ripple="" asp-action="Teams" asp-route-Id="@competitionItem.Id">Register</a>
																						}
																						else
																						{
																							<span class="countdown">00:00:00</span>
																							<a asp-action="Exam" asp-controller="Competition" asp-route-CompetitionId="@competitionItem.Id" title="" class="add-butn bg-success px-3" data-ripple="">Start</a>
																						}
																					}
																				}
																				else
																				{
																					if (competitionItem.ShowResult == true)
																					{
																						<a asp-action="Results" asp-controller="Competition" asp-route-CompetitionId="@competitionItem.Id" title="" class="add-butn bg-danger px-3 mb-4" data-ripple="">Results</a>
																					}
																				}
																			</div>
																			@if (user != null && User.IsInRole("Admin"))
																			{
																				<div>
																					<a asp-action="QuestionsManagement" asp-asp-controller="Competition" asp-route-competitionId="@competitionItem.Id" title="For Admin" class="add-butn bg-info text-white" data-ripple="" style="position:relative;">Questions  Management</a>
																					<a asp-action="EvaluateTheAnswers" asp-asp-controller="Competition" asp-route-competitionId="@competitionItem.Id" title="For Admin" class="add-butn  accept-button mr-5" data-ripple="" style="position:relative;">Evaluate  Answers</a>
																				</div>
																			}
																		</div>
																	</div>
																</li>
															</ul>
														</div>
													</div>
												}
											}
										</div>
									</div>
								</div>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
	</section>
	<script>
		document.querySelectorAll('.competition-item').forEach(function (element) {
			var competitionTime = new Date(element.dataset.competitionTime);
			competitionTime.setHours(competitionTime.getHours()); // Add one hour

			var countdownInterval = setInterval(updateCountdown, 1000);

			function updateCountdown() {
				var now = new Date();
				var timeRemaining = Math.max(competitionTime - now, 0); // Ensure the countdown doesn't go negative

				if (timeRemaining > 0) {
					var hours = Math.floor((timeRemaining / 1000 / 60 / 60) % 24);
					var minutes = Math.floor((timeRemaining / 1000 / 60) % 60);
					var seconds = Math.floor((timeRemaining / 1000) % 60);

					var formattedHours = ('0' + hours).slice(-2);
					var formattedMinutes = ('0' + minutes).slice(-2);
					var formattedSeconds = ('0' + seconds).slice(-2);

					element.querySelector('.countdown').innerText = formattedHours + ':' + formattedMinutes + ':' + formattedSeconds;
				} else {
					clearInterval(countdownInterval);
					element.querySelector('.countdown').innerText = '00:00:00';
					element.querySelector('.start-button').style.display = 'inline-block';
				}
			}
		});
	</script>
</body>
</html>